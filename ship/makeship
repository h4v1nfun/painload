#! /bin/sh
#
# usage: makeship FILENAME
#
set -euf

if test "$BUILD_PATH" != "$(echo "$BUILD_PATH" | tr -d \\n)"; then
  echo "Error: BUILD_PATH must not contain \\n" >&2
  exit 23
fi

# resolve LIBNAME -> FILENAME
eval "resolve() {
$(
  echo "$BUILD_PATH" \
    | tr : \\n \
    | sed 's_.*_  ls -d "&/$1" 2>/dev/null ||_'
)
  {
    echo \"makeship: cannot resolve $1\" >&2
    return 23
  }
}"

# deps FILENAME ENCNAME -> (ENCNAME ENCNAME\n)*
deps() {
  if eval test -z \"\${__$2-}\"; then
    eval __$2=ok
    echo $2 $2
    for x in $(includes "$1"); do
      x="$(resolve "$x")"
      set -- "$1" $2 "$x" $(encname "$x")
      echo $2 $4
      deps "$3" $4
    done
  fi
}

# encname FILENAME -> ENCNAME
encname() {
  readlink -f "$1" | base64 -w 0 | tr = _
}
# decname ENCNAME -> CANONICAL_FILENAME
decname() {
  echo "$1" | tr _ = | base64 -d
}

# includes FILENAME -> (LIBNAME\n)*
includes() {
  sed -n 's:^#@include \([0-9A-Za-z/_-]\+\)$:\1:p' "$1"
}

#
# main
#
cat<<EOF
#! /bin/sh
# this file was generated by makeship
#   build date: $(date -u --rfc-3339=s)
#   git describe: $(git describe --always --dirty --abbrev=0 2>/dev/null || :)

EOF
deps "$1" $(encname "$1") \
  | tsort \
  | tac \
  | while read en; do
      cn="$(decname $en)"
      echo "#@@include begin $cn"
      cat "$cn"
      echo "#@@include end $cn"
    done \
  | sed '/^#@.*/d'
